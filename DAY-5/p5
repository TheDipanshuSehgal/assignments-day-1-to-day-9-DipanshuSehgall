
#include <iostream>
#include <vector>
using namespace std;

int searchInRotatedSortedArray(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (nums[mid] == target) {
            return mid; // Target found
        }

        // Check if the left half is sorted
        if (nums[low] <= nums[mid]) {
            // If target lies within the left sorted half
            if (nums[low] <= target && target < nums[mid]) {
                high = mid - 1; // Search in the left half
            } else {
                low = mid + 1; // Search in the right half
            }
        }
        // Otherwise, the right half is sorted
        else {
            // If target lies within the right sorted half
            if (nums[mid] < target && target <= nums[high]) {
                low = mid + 1; // Search in the right half
            } else {
                high = mid - 1; // Search in the left half
            }
        }
    }

    return -1; // Target not found
}

int main() {
    vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
    int target = 0;

    int result = searchInRotatedSortedArray(nums, target);

    if (result != -1) {
        cout << "Target " << target << " found at index " << result << "." << endl;
    } else {
        cout << "Target " << target << " not found in the array." << endl;
    }

    return 0;
}

Input:
nums = {4, 5, 6, 7, 0, 1, 2}
target = 0

Output:
Target 0 found at index 4.
