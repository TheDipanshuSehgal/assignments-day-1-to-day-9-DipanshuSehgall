
#include <iostream>
using namespace std;

// Define the structure for a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;

    // Constructor to create a new node
    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

// Insert a node into the BST
Node* insert(Node* root, int val) {
    if (root == nullptr) {
        return new Node(val); // Create a new node if root is null
    }

    if (val < root->data) {
        // If value is smaller, insert in the left subtree
        root->left = insert(root->left, val);
    } else {
        // If value is larger or equal, insert in the right subtree
        root->right = insert(root->right, val);
    }

    return root;
}

// Postorder traversal of the BST
void postorder(Node* root) {
    if (root == nullptr) {
        return;
    }

    postorder(root->left);  // Traverse the left subtree
    postorder(root->right);  // Traverse the right subtree
    cout << root->data << " ";  // Visit the root node
}

int main() {
    Node* root = nullptr;

    // Inserting nodes into the BST
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);

    cout << "Postorder Traversal of the BST: ";
    postorder(root);
    cout << endl;

    return 0;
}

Output:
Postorder Traversal of the BST: 20 40 30 60 80 70 50
