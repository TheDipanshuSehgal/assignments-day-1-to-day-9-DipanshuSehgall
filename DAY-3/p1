#include <iostream>

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummyHead = new ListNode(0);
        ListNode* current = dummyHead;
        int carry = 0;

        while (l1 || l2 || carry) {
            int sum = carry;
            if (l1) {
                sum += l1->val;
                l1 = l1->next;
            }
            if (l2) {
                sum += l2->val;
                l2 = l2->next;
            }

            carry = sum / 10;
            current->next = new ListNode(sum % 10);
            current = current->next;
        }

        return dummyHead->next; // Return the next node of dummy head
    }
};

// Helper function to print the linked list
void printList(ListNode* node) {
    while (node) {
        std::cout << node->val;
        if (node->next) {
            std::cout << " -> ";
        }
        node = node->next;
    }
    std::cout << std::endl;
}

// Example usage
int main() {
    // Creating first number: 342 (represented as 2 -> 4 -> 3)
    ListNode* l1 = new ListNode(2);
    l1->next = new ListNode(4);
    l1->next->next = new ListNode(3);

    // Creating second number: 465 (represented as 5 -> 6 -> 4)
    ListNode* l2 = new ListNode(5);
    l2->next = new ListNode(6);
    l2->next->next = new ListNode(4);

    Solution solution;
    ListNode* result = solution.addTwoNumbers(l1, l2);

    // Print the result
    printList(result); // Output should be: 7 -> 0 -> 8 (which represents 807)

    // Clean up memory (not shown for brevity)
    return 0;
}


OUTPUT : 

7 -> 0 -> 8


=== Code Execution Successful ===
